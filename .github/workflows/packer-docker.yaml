name: packer

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        required: false
        default: '["ubuntu-latest"]'
      ENVIRONMENTS:
        description: '{"environments":[{"name":"dev"}, {"name":"qa"}]}'
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS_DEV:
        required: false
      AZURE_CREDENTIALS_QA:
        required: false
      AZURE_CREDENTIALS_PROD:
        required: false

jobs:
  set_env_matrix:
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ${{fromJSON(inputs.runs-on)}}
    steps:
      - name: Set matrix for environment
        id: set-matrix
        run: |
          set -e
          echo '${{ inputs.ENVIRONMENTS }}' | jq .
          MATRIX=$(echo '${{ inputs.ENVIRONMENTS }}' | jq -c .)
          echo "::set-output name=matrix::${MATRIX}"

  build:
    needs: set_env_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.set_env_matrix.outputs.matrix)}}
    runs-on: ${{fromJSON(inputs.runs-on)}}
    steps:
      - name: Create Azure credentials secret name
        id: creds_env
        run: |
          AZURE_CREDS_TMP=AZURE_CREDENTIALS_${{ matrix.environments.name }}
          AZURE_CREDS_ENV=$(echo $AZURE_CREDS_TMP |tr '[:lower:]' '[:upper:]')
          echo "::set-output name=azure_creds_env::$AZURE_CREDS_ENV"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets[steps.creds_env.outputs.azure_creds_env] }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Packer build
        env:
          ENV: ${{ matrix.environments.name }}
          AZURE_SECRET: ${{ secrets[matrix.environments.secret_name] }}
          TEMP_DIRECTORY: ${{ runner.temp }}
          RESOURCE_GROUP: rg-${{ matrix.environments.name }}-we-${{ env.AZURE_RESOURCE_GROUP_SUFFIX }}
        run: |
          # pre github actions
          set -e
          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
          TEMP_DIRECTORY="${TEMP_DIRECTORY:-/tmp}"
          mkdir -p ${PWD}/${DIR}/.terraform/
          echo AZURE_CLIENT_ID=$(echo ${AZURE_SECRET} | jq -r .clientId) > ${TEMP_DIRECTORY}/${ENV}.env
          echo AZURE_CLIENT_SECRET=$(echo ${AZURE_SECRET} | jq -r .clientSecret) >> ${TEMP_DIRECTORY}/${ENV}.env
          echo AZURE_TENANT_ID=$(echo ${AZURE_SECRET} | jq -r .tenantId) >> ${TEMP_DIRECTORY}/${ENV}.env
          echo AZURE_SUBSCRIPTION_ID=$(echo ${AZURE_SECRET} | jq -r .subscriptionId) >> ${TEMP_DIRECTORY}/${ENV}.env
          set +e
          sudo chown -R 1000:1000 ${AZURE_CONFIG_DIR}
          sudo chown -R 1000:1000 ${TEMP_DIRECTORY}/${ENV}.env
          docker run --entrypoint "/opt/packer.sh" -v $(AZURE_CONFIG_DIR):/home/tools/.azure -v $(TEMP_DIRECTORY)/$(ENV).env:/tmp/$(ENV).env $(IMAGE) build $(ENV) $(GIT_REPO) $(GIT_BRANCH) $(TEMPLATE_FILE) $(RESOURCE_GROUP)
          #make build
          ERROR_CODE=$?
          # post github actions
          #sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
          #sudo chown -R $(id -u):$(id -g) ${TEMP_DIRECTORY}/${ENV}.env
          exit $ERROR_CODE

      - name: Azure logout
        if: always()
        uses: azure/CLI@v1
        env:
          ENV: ${{ matrix.environments.name }}
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az logout
            az cache purge
            az account clear
