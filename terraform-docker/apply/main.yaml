parameters:
  - name: poolNameTemplate
    type: string
    default: ""
  - name: poolVmImage
    type: string
    default: "ubuntu-18.04"
  - name: sourceBranch
    type: string
    default: "refs/heads/master"
  - name: azureSubscriptionTemplate
    type: string
  - name: terraformFolder
    type: string
  - name: environments
    type: object
    default:
      - name: dev
      - name: qa
      - name: prod
  - name: awsRegion
    type: string
    default: ""
  - name: awsServiceConnectionTemplate
    type: string
    default: ""
  - name: awsArn
    type: string
    default: ""

stages:
  - ${{ each env in parameters.environments }}:
      - stage: apply_${{ env.name }}
        displayName: ${{ env.name }}
        condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
        jobs:
          - deployment: ${{ env.name }}
            pool:
              ${{ if not(eq(parameters.poolNameTemplate, '')) }}:
                name: ${{ format(parameters.poolNameTemplate, env.name) }}
              ${{ if not(eq(parameters.poolVmImage, '')) }}:
                vmImage: ${{ parameters.poolVmImage }}
            environment: ${{ env.name }}
            displayName: Terraform Apply
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      displayName: Get sources

                    - bash: |
                        mkdir -p ${TERRAFORM_PLAN_FOLDER}
                      env:
                        TERRAFORM_PLAN_FOLDER: $(Build.Repository.LocalPath)/${{ parameters.terraformFolder }}/.terraform/plan
                      displayName: Create terraform plan folder

                    - task: DownloadPipelineArtifact@2
                      displayName: "Download artifact"
                      inputs:
                        artifact: "${{ env.name }}.enc"
                        path: $(Build.Repository.LocalPath)/${{ parameters.terraformFolder }}/.terraform/plans

                    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
                      displayName: "Get AWS credentials"
                      inputs:
                        workingDirectory: "."
                        awsCredentials: ${{ format(parameters.awsServiceConnectionTemplate, env.name) }}
                        regionName: ${{ parameters.awsRegion }}
                        scriptType: inline
                        inlineScript: |
                          set -e
                          AWS_CONFIG_FILE=${HOME}/.aws/config
                          AWS_SHARED_CREDENTIALS_FILE=${HOME}/.aws/credentials
                          TMPFILE=${HOME}/.aws/tmp.json
                          mkdir $(dirname $TMPFILE)
                          aws sts get-federation-token --name xkf-$ENV --policy-arns arn="$AWS_ARN" --region $AWS_REGION > $TMPFILE

                          KEY_ID=$(cat $TMPFILE |jq -r .Credentials.AccessKeyId)
                          KEY_SECRET=$(cat $TMPFILE |jq -r .Credentials.SecretAccessKey)
                          SESSION_TOKEN=$(cat $TMPFILE |jq -r .Credentials.SessionToken)

                          # Create the credentials file from AWS session token
                          cat <<EOF > $AWS_SHARED_CREDENTIALS_FILE
                          [xkf-$ENV]
                          aws_access_key_id = $KEY_ID
                          aws_secret_access_key = $KEY_SECRET
                          aws_session_token = $SESSION_TOKEN

                          EOF

                          # Create the config file

                          cat <<EOF > $AWS_CONFIG_FILE
                          [default]
                          region = $AWS_REGION
                          output = json

                          [profile xkf-$ENV]
                              source_profile = xkf-$ENV
                              role_arn = $AWS_ARN

                          EOF

                          sudo chown -R 1000:1000 ${AWS_CONFIG_FILE}
                          sudo chown -R 1000:1000 ${AWS_SHARED_CREDENTIALS_FILE}
                      env:
                        AWS_REGION: ${{ parameters.awsRegion }}
                        ENV: ${{ env.name }}
                        AWS_ARN: ${{ parameters.awsArn }}
                      condition: ne('${{ parameters.awsRegion }}', '')

                    - task: AzureCLI@1
                      displayName: "Apply"
                      inputs:
                        azureSubscription: ${{ format(parameters.azureSubscriptionTemplate, env.name) }}
                        addSpnToEnvironment: true
                        scriptLocation: inlineScript
                        inlineScript: |
                          # pre-azdo
                          set -e
                          export AWS_PROFILE=xkf-${{ env.name }}
                          export AWS_SHARED_CREDENTIALS_FILE="${AWS_SHARED_CREDENTIALS_FILE:-${HOME}/.aws/credentials}"
                          export AWS_CONFIG_FILE="${AWS_CONFIG_FILE:-${HOME}/.aws/config}"

                          AZURE_CONFIG_DIR="${AZURE_CONFIG_DIR:-${HOME}/.azure}"
                          mkdir -p ${PWD}/${DIR}/.terraform/
                          echo ARM_CLIENT_ID=${servicePrincipalId} > ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_CLIENT_SECRET=${servicePrincipalKey} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_TENANT_ID=${tenantId} >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          echo ARM_SUBSCRIPTION_ID=$(az account show -o tsv --query 'id') >> ${PWD}/${DIR}/.terraform/${ENV}.env
                          set +e
                          sudo chown -R 1000:1000 ${PWD}/${DIR}
                          sudo chown -R 1000:1000 ${AZURE_CONFIG_DIR}
                          sudo chown -R 1000:1000 ${PWD}/global.tfvars

                          make apply
                          ERROR_CODE=$?

                          # post-azdo
                          sudo chown -R $(id -u):$(id -g) ${PWD}/${DIR}
                          sudo chown -R $(id -u):$(id -g) ${AZURE_CONFIG_DIR}
                          sudo chown -R $(id -u):$(id -g) ${PWD}/global.tfvars

                          if [[ AWS_REGION != "" ]]
                          then
                            sudo chown -R $(id -u):$(id -g) $(dirname ${AWS_SHARED_CREDENTIALS_FILE})
                          fi

                          exit $ERROR_CODE
                      env:
                        DIR: ${{ parameters.terraformFolder }}
                        ENV: ${{ env.name }}
                        AWS_REGION: ${{ parameters.awsRegion }}
