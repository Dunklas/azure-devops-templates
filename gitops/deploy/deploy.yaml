parameters:
  poolName: ""
  environment: ""
  serviceName: ""
  sourceBranch: ""
  deployTags: false
  imageTagPath: ""

jobs:
  - deployment: deploy_${{ parameters.environment }}
    condition: and(succeeded(), or(and(eq(variables['resources.pipeline.ciPipeline.sourceBranch'], '${{ parameters.sourceBranch }}'), eq(${{ parameters.deployTags }}, false)), and(startsWith(variables['resources.pipeline.ciPipeline.sourceBranch'], 'refs/tags/'), eq(${{ parameters.deployTags }}, true))))
    displayName: Deploy to ${{ parameters.environment }}
    pool:
      name: ${{ parameters.poolName }}
    continueOnError: false
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              displayName: Get sources
              persistCredentials: true

            - bash: |
                set -e
                IMAGE_TAG=${SERVICE_NAME}:${SOURCE_VERSION:0:7}
                echo "##vso[task.setvariable variable=imageTag]$IMAGE_TAG"
              displayName: "Create image id"
              env:
                SOURCE_VERSION: $(Build.SourceVersion)

            - script: |
                set -e
                pip3 install yq

                git checkout master
                git pull
                git fetch -p
                git reset --hard origin/master
                git config --global user.email "azure-pipelines@${PROJECT_NAME}.${REPO_NAME}"
                git config --global user.name "Azure Pipelines (${PROJECT_NAME} ${REPO_NAME})"
                git status

                CURRENT_TAG=$(yq -r '${TAG_PATH}' ${ENV}/${SERVICE_NAME}.yaml)
                if [ "${CURRENT_TAG}" == "${NEW_TAG}" ]; then
                  echo "Image tag for ${ENV}/${SERVICE_NAME}.yaml is already ${NEW_TAG}"
                  exit 0
                fi

                echo "Changing image tag from ${CURRENT_TAG} to ${NEW_TAG} for ${ENV}/${SERVICE_NAME}.yaml"
                yq --in-place -Y "${TAG_PATH}=\"${NEW_TAG}\"" ${ENV}/${SERVICE_NAME}.yaml
                git add ${ENV}/${SERVICE_NAME}.yaml
                git status
                git commit -m "${ENV}/${SERVICE_NAME}.yaml - changed image tag from ${CURRENT_TAG} to ${NEW_TAG}"
                git push origin
              displayName: "Change image in GitOps repo"
              env:
                ENV: ${{ parameters.environment }}
                SERVICE_NAME: ${{ parameters.serviceName }}
                NEW_TAG: $(imageTag)
                TAG_PATH: ${{ parameters.imageTagPath }}
                PROJECT_NAME: $(System.TeamProject)
                REPO_NAME: $(Build.Repository.Name)

            - script: |
                set -e
                pip3 install yq
                wget https://github.com/XenitAB/flux-status/releases/download/v0.1.0-rc4/flux-status-cli
                chmod +x flux-status-cli
                mv flux-status-cli /usr/bin/
                wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                mv jq-linux64 jq
                chmod +x jq
                mv jq /usr/bin/

                git checkout master
                git pull
                git fetch -p
                git reset --hard origin/master
                git config --global user.email "azure-pipelines@${PROJECT_NAME}.${REPO_NAME}"
                git config --global user.name "Azure Pipelines (${PROJECT_NAME} ${REPO_NAME})"
                git status

                while true; do
                  sleep 5

                  git pull origin master
                  CURRENT_TAG=$(yq -r '${TAG_PATH}' ${ENV}/${SERVICE_NAME}.yaml)
                  if [ "${CURRENT_TAG}" != "${NEW_TAG}" ]; then
                    echo "Image tag for ${ENV}/${SERVICE_NAME}.yaml is no longer the expected value ${NEW_TAG}"
                    exit 1
                  fi

                  COMMIT_ID=$(git rev-parse HEAD)

                  set +e
                  RESULT=$(flux-status-cli --instance ${ENV} --action workload  --git-url ${REPO_URI} --azdo-pat ${TOKEN} --commit-id ${COMMIT_ID})
                  if [ $? -ne 0 ]; then
                    echo $RESULT
                    continue
                  fi
                  set -e

                  STATE=$(echo $RESULT | jq -r .state)
                  echo "Commit status is $STATE"
                  if [ $STATE == "succeeded" ]; then
                    exit 0
                  elif [[ $STATE == "failed" || $STATE == "canceled" ]]; then
                    exit 1
                  fi
                done
              displayName: Wait for ${{ parameters.environment }}
              env:
                ENV: ${{ parameters.environment }}
                SERVICE_NAME: ${{ parameters.serviceName }}
                NEW_TAG: $(imageTag)
                TAG_PATH: ${{ parameters.imageTagPath }}
                PROJECT_NAME: $(System.TeamProject)
                REPO_NAME: $(Build.Repository.Name)
                REPO_URI: $(Build.Repository.Uri)
                TOKEN: $(System.AccessToken)
