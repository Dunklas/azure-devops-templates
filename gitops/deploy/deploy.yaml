parameters:
  poolName: ""
  environment: ""
  serviceName: ""
  sourceBranch: ""
  deployTags: false

jobs:
  - deployment: deploy_${{ parameters.environment }}
    condition: and(succeeded(), or(and(eq(variables['resources.pipeline.ciPipeline.sourceBranch'], '${{ parameters.sourceBranch }}'), eq(${{ parameters.deployTags }}, false)), and(startsWith(variables['resources.pipeline.ciPipeline.sourceBranch'], 'refs/tags/'), eq(${{ parameters.deployTags }}, true))))
    displayName: Deploy to ${{ parameters.environment }}
    pool:
      name: ${{ parameters.poolName }}
    continueOnError: false
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - template: deploy_steps.yaml
            parameters:
              environment: ${{ parameters.environment }}
              serviceName: ${{ parameters.serviceName }}

  - job: wait_${{ parameters.environment }}
    condition: succeeded()
    dependsOn: deploy_${{ parameters.environment }}
    displayName: Wait for ${{ parameters.environment }}
    pool:
      name: ${{ parameters.poolName }}
    continueOnError: false
    timeoutInMinutes: 15
    variables:
      COMMIT_ID: $[ dependencies.deploy_${{ parameters.environment }}.outputs['deploy_${{ parameters.environment }}.updateImage.commitId'] ]
    steps:
    - script: |
        set -e

        COMMIT_ID=$(COMMIT_ID)
        if [ -z "$COMMIT_ID" ]; then
          echo "Commit Id is not set"
          exit 1
        fi

        wget https://github.com/XenitAB/flux-status/releases/download/v0.1.0-rc4/flux-status-cli
        chmod +x flux-status-cli
        wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
        mv jq-linux64 jq
        chmod +x jq

        echo "Environment: ${{ parameters.environment }}"
        echo "Commit Id: $COMMIT_ID"
        while true; do
          sleep 3

          set +e
          RESULT=$(./flux-status-cli --instance ${{ parameters.environment }} --action workload  --git-url $(Build.Repository.Uri) --azdo-pat $(System.AccessToken) --commit-id $COMMIT_ID)
          if [ $? -ne 0 ]; then
            echo $RESULT
            continue
          fi
          set -e

          STATE=$(echo $RESULT | jq -r .state)
          echo "Commit status is $STATE"
          if [ $STATE == "succeeded" ]; then
            exit 0
          elif [[ $STATE == "failed" || $STATE == "canceled" ]]; then
            exit 1
          fi
        done
