parameters:
  poolVmImage: "ubuntu-16.04"
  poolName: ""
  sourceBranch: "refs/heads/master"
  dockerfilePath: "./Dockerfile"
  dockerBuildArgs: ""
  serviceName: ""
stages:
  - stage: build
    jobs:
      - job: image
        pool:
          ${{ if not(eq(parameters.poolName, '')) }}:
            name: ${{ parameters.poolName }}
          ${{ if not(eq(parameters.vmImage, '')) }}:
            vmImage: ${{ parameters.vmImage }}
        continueOnError: false
        steps:
          - bash: |
              set -e
              IMAGE_ID=${SERVICE_NAME}:${SOURCE_VERSION:0:7}
              echo "##vso[task.setvariable variable=imageId]$IMAGE_ID"
            displayName: "Create image id"
            env:
              SERVICE_NAME: ${{ parameters.serviceName }}
              SOURCE_VERSION: $(Build.SourceVersion)

          - bash: |
              set -ex
              docker build -f ${DOCKERFILE_PATH} ${DOCKER_BUILD_ARGS} -t ${IMAGE_ID} ${DOCKER_BUILD_ARGS} .
              docker save ${IMAGE_ID} | gzip > ${IMAGE_ID}.tar.gz
            env:
              DOCKERFILE_PATH: ${{ parameters.dockerfilePath }}
              IMAGE_ID: $(imageId)
              DOCKER_BUILD_ARGS: ${{ parameters.dockerBuildArgs }}
            displayName: "Build and save image"
            condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))

          - task: PublishPipelineArtifact@1
            displayName: "Publish Azure Pipelines Artifact"
            inputs:
              targetPath: $(imageId).tar.gz
              artifactName: ${{ parameters.serviceName }}
            condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
